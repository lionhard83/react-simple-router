{
  "manifest": {
    "name": "postcss-preset-env",
    "description": "Convert modern CSS into something browsers understand",
    "version": "7.4.3",
    "author": {
      "name": "Jonathan Neal",
      "email": "jonathantneal@hotmail.com"
    },
    "license": "CC0-1.0",
    "engines": {
      "node": "^12 || ^14 || >=16"
    },
    "main": "dist/index.cjs",
    "module": "dist/index.mjs",
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs",
        "default": "./dist/index.mjs"
      }
    },
    "files": [
      "CHANGELOG.md",
      "LICENSE.md",
      "README.md",
      "dist"
    ],
    "dependencies": {
      "@csstools/postcss-color-function": "^1.0.3",
      "@csstools/postcss-font-format-keywords": "^1.0.0",
      "@csstools/postcss-hwb-function": "^1.0.0",
      "@csstools/postcss-ic-unit": "^1.0.0",
      "@csstools/postcss-is-pseudo-class": "^2.0.1",
      "@csstools/postcss-normalize-display-values": "^1.0.0",
      "@csstools/postcss-oklab-function": "^1.0.2",
      "@csstools/postcss-progressive-custom-properties": "^1.3.0",
      "autoprefixer": "^10.4.4",
      "browserslist": "^4.20.2",
      "css-blank-pseudo": "^3.0.3",
      "css-has-pseudo": "^3.0.4",
      "css-prefers-color-scheme": "^6.0.3",
      "cssdb": "^6.5.0",
      "postcss-attribute-case-insensitive": "^5.0.0",
      "postcss-clamp": "^4.1.0",
      "postcss-color-functional-notation": "^4.2.2",
      "postcss-color-hex-alpha": "^8.0.3",
      "postcss-color-rebeccapurple": "^7.0.2",
      "postcss-custom-media": "^8.0.0",
      "postcss-custom-properties": "^12.1.5",
      "postcss-custom-selectors": "^6.0.0",
      "postcss-dir-pseudo-class": "^6.0.4",
      "postcss-double-position-gradients": "^3.1.1",
      "postcss-env-function": "^4.0.6",
      "postcss-focus-visible": "^6.0.4",
      "postcss-focus-within": "^5.0.4",
      "postcss-font-variant": "^5.0.0",
      "postcss-gap-properties": "^3.0.3",
      "postcss-image-set-function": "^4.0.6",
      "postcss-initial": "^4.0.1",
      "postcss-lab-function": "^4.1.2",
      "postcss-logical": "^5.0.4",
      "postcss-media-minmax": "^5.0.0",
      "postcss-nesting": "^10.1.3",
      "postcss-opacity-percentage": "^1.1.2",
      "postcss-overflow-shorthand": "^3.0.3",
      "postcss-page-break": "^3.0.4",
      "postcss-place": "^7.0.4",
      "postcss-pseudo-class-any-link": "^7.1.1",
      "postcss-replace-overflow-wrap": "^4.0.0",
      "postcss-selector-not": "^5.0.0",
      "postcss-value-parser": "^4.2.0"
    },
    "peerDependencies": {
      "postcss": "^8.4"
    },
    "devDependencies": {
      "postcss-simple-vars": "^6.0.3"
    },
    "scripts": {
      "build": "rollup -c ../../rollup/default.js",
      "clean": "node -e \"fs.rmSync('./dist', { recursive: true, force: true });\"",
      "docs": "node ./docs/generate.mjs",
      "lint": "npm run lint:eslint && npm run lint:package-json",
      "lint:eslint": "eslint ./src --ext .js --ext .ts --ext .mjs --no-error-on-unmatched-pattern",
      "lint:package-json": "node ../../.github/bin/format-package-json.mjs",
      "prepublishOnly": "npm run clean && npm run build && npm run test",
      "stryker": "stryker run --logLevel error",
      "test": "node .tape.mjs && node ./src/test/test.mjs && npm run test:exports",
      "test:exports": "node ./test/_import.mjs && node ./test/_require.cjs",
      "test:rewrite-expects": "REWRITE_EXPECTS=true node .tape.mjs"
    },
    "homepage": "https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/csstools/postcss-plugins.git",
      "directory": "plugin-packs/postcss-preset-env"
    },
    "bugs": {
      "url": "https://github.com/csstools/postcss-plugins/issues"
    },
    "keywords": [
      "css",
      "csswg",
      "features",
      "future",
      "lists",
      "next",
      "postcss",
      "postcss-plugin",
      "specifications",
      "specs",
      "stages",
      "w3c"
    ],
    "volta": {
      "extends": "../../package.json"
    },
    "_registry": "npm",
    "_loc": "/Users/carloleonardi/Documents/workspace/React/sample-routing/@mui/material/v6/npm-postcss-preset-env-7.4.3-fb1c8b4cb405da042da0ddb8c5eda7842c08a449-integrity/node_modules/postcss-preset-env/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Preset Env [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[<img alt=\"npm version\" src=\"https://img.shields.io/npm/v/postcss-preset-env.svg\" height=\"20\">][npm-url]\n[<img alt=\"build status\" src=\"https://github.com/csstools/postcss-plugins/workflows/test/badge.svg\" height=\"20\">][cli-url]\n[![install size][package-phobia-badge]][package-phobia]\n[<img alt=\"Discord\" src=\"https://shields.io/badge/Discord-5865F2?logo=discord&logoColor=white\">][discord]\n\n[PostCSS Preset Env] lets you convert modern CSS into something most browsers\ncan understand, determining the polyfills you need based on your targeted\nbrowsers or runtime environments.\n\n## Quick start\n\n[PostCSS Preset Env] is a [PostCSS] plugin.<br>\nIf you are already using [PostCSS] to build your CSS, you can simply add [PostCSS Preset Env] to your configuration.\n\n- Install `postcss-preset-env` from npm.\n- Add `postcss-preset-env` to your configuration:\n\n```js\nconst postcssPresetEnv = require('postcss-preset-env');\n\nconst yourConfig = {\n\tplugins: [\n\t\tpostcssPresetEnv(/* pluginOptions */)\n\t]\n}\n```\n\n_[Read more on how to use and install PostCSS Preset Env.](#usage)_\n\n## How does it work?\n\n[PostCSS Preset Env] is a Plugin Pack for [PostCSS]. It leverages the list of the features we keep an eye from [CSSDB][cssdb] and applies plugins, so you can use those new features without having to worry about browser support.\n\nCSSDB exposes the browser support that each feature has which can come from [Can I Use](https://caniuse.com/css-all) or from [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/all) (through [mdn/browser-compat-data](https://github.com/mdn/browser-compat-data)).\n\nBy providing a list of browser targets for your project, plugins that aren't needed will be skipped. Over time your targets might change and by updating the settings your CSS bundle will only ever contain the needed fallbacks.\n\nWhat [PostCSS Preset Env] does is to take the support data that comes from MDN and Can I Use and determine from a [browserlist](https://github.com/browserslist/browserslist) whether those transformations are needed. It also packs [Autoprefixer](https://github.com/postcss/autoprefixer) within and shares the list with it, so prefixes are only applied when you're going to need them given your browser support list.\n\n### Glossary:\n\n* **Browser list option**: [Browserlist](https://github.com/browserslist/browserslist) is a package that gives you a list of browsers for a given query. For example, `chrome < 42` will give you a list of every Chrome version that has been released up to, but not including, 42.\n* **Browser support stats**: Features get introduced on browsers at certain versions. They're often visible on [MDN](https://developer.mozilla.org/en-US/) and [Can I Use](https://caniuse.com/). Comparing these stats with the needed _support_ for your project tells you if it's safe to use a feature or not.\n* **CSS Feature**: A CSS feature is often part of some spec that enables a specific feature. For example, `hwb` functional notation lets you express a given color according to its hue, whiteness, and blackness. This is part of the CSS Color 4 Spec.\n* **CSS Spec**: A Spec is a document that collects new features, what problems are they trying to solve and how it's intended to be solved (generally). This is usually an evolving document that goes over lengthy discussions between several people from different companies.\n* **Plugin**: A plugin is package that's intended (usually) to enable a new CSS Feature by leveraging PostCSS. This doesn't need to be part of any spec. An example of the latter is [PostCSS Mixins](https://github.com/postcss/postcss-mixins), a concept that existed on Less or Sass, but it's not part of any spec. This plugin plack **only** packs plugins that enable features acknowledged by the World Wide Web Consortium (W3C) which will then be implemented by browsers later.\n* **Polyfill**: A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it. A polyfill _should_ be indistinguishable from the native behaviour.\n\nHere's a quick example of the syntax you can leverage by using [PostCSS Preset Env].\n\n```pcss\n@custom-media --viewport-medium (width <= 50rem);\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\n:root {\n  --mainColor: #12345678;\n}\n\nbody {\n  color: var(--mainColor);\n  font-family: system-ui;\n  overflow-wrap: break-word;\n}\n\n:--heading {\n  background-image: image-set(url(img/heading.png) 1x, url(img/heading@2x.png) 2x);\n\n  @media (--viewport-medium) {\n    margin-block: 0;\n  }\n}\n\na {\n  color: rgb(0 0 100% / 90%);\n\n  &:hover {\n    color: rebeccapurple;\n  }\n}\n\n/* becomes */\n\n:root {\n  --mainColor: rgba(18, 52, 86, 0.47059);\n}\n\nbody {\n  color: rgba(18, 52, 86, 0.47059);\n  color: var(--mainColor);\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;\n  word-wrap: break-word;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  background-image: url(img/heading.png);\n}\n\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  h1, h2, h3, h4, h5, h6 {\n    background-image: url(img/heading@2x.png)\n  }\n}\n\n@media (max-width: 50rem) {\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n}\n\na {\n  color: rgba(0, 0, 255, 0.9)\n}\n\na:hover {\n  color: #639;\n}\n```\n\nWithout any configuration options, [PostCSS Preset Env] enables **Stage 2**\nfeatures and supports **all** browsers.\n\n[![Transform with Preset Env][readme-transform-with-preset-env-img]][readme-transform-with-preset-env-url]\n[![Style with Preset Env][readme-style-with-preset-env-img]][readme-style-with-preset-env-url]\n\n⚠️ Please note that some features need a companion library that makes \nthe feature work. While we try to avoid this requirement, there are instances\nin which this isn't possible to polyfill a new behaviour with _just_ CSS.\n\n[See the list below](#plugins-that-need-client-library).\n\n## Usage\n\nAdd [PostCSS Preset Env] to your project:\n\n```bash\nnpm install postcss-preset-env --save-dev\n```\n\nUse [PostCSS Preset Env] as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssPresetEnv = require('postcss-preset-env');\n\npostcss([\n  postcssPresetEnv(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS Preset Env] runs in all Node environments, with special instructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) | [Rollup](INSTALL.md#rollup) |\n| --- | --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### stage\n\nThe `stage` option determines which CSS features to polyfill, based upon their\nstability in the process of becoming implemented web standards.\n\n```js\npostcssPresetEnv({ stage: 0 })\n```\n\nThe `stage` can be `0` (experimental) through `4` (stable), or `false`. Setting\n`stage` to `false` will disable every polyfill. Doing this would only be useful\nif you intended to exclusively use the [`features`](#features) option.\n\nDefault: `2`\n\n### minimumVendorImplementations\n\nThe `minimumVendorImplementations` option determines which CSS features to polyfill, based their implementation status.\nThis can be used to enable plugins that are available in browsers regardless of the [spec status](#stage).\n\n```js\npostcssPresetEnv({ minimumVendorImplementations: 2 })\n```\n\n`minimumVendorImplementations` can be `0` (no vendor has implemented it) through `3` (all major vendors).<br>\n\nDefault: `0`\n\n**Note:**\n\nWhen a feature has not yet been implemented by any vendor it can be considered experimental.<br>\nEven with a single implementation it might still change in the future.<br>\nSometimes issues with a feature/specification are only discovered after it becomes available.\n\nA value of `2` is recommended when you want to use only those features that should be [stable](#stability-and-portability).\n\nHaving 2 independent implementations is [a critical step in proposals becoming standards](https://www.w3.org/2021/Process-20211102/#implementation-experience) and a good indicator of a feature's stability.\n\n### features\n\nThe `features` option enables or disables specific polyfills by ID. Passing\n`true` to a specific feature ID will enable its polyfill, while passing `false`\nwill disable it. [List of Features](https://github.com/csstools/postcss-plugins/blob/main/plugin-packs/postcss-preset-env/FEATURES.md)\n\n```js\npostcssPresetEnv({\n  /* use stage 3 features + css nesting rules */\n  stage: 3,\n  features: {\n    'nesting-rules': true\n  }\n})\n```\n\nPassing an object to a specific feature ID will both enable and configure it.\n\n```js\npostcssPresetEnv({\n  /* use stage 3 features + css color-mod (warning on unresolved) */\n  stage: 3,\n  features: {\n    'color-mod-function': { unresolved: 'warn' }\n  }\n})\n```\n\nAny polyfills not explicitly enabled or disabled through `features` are\ndetermined by the [`stage`](#stage) option.\n\n### browsers\n\nThe `browsers` option determines which polyfills are required based upon the\nbrowsers you are supporting.\n\n[PostCSS Preset Env] supports any standard [browserslist] configuration, which\ncan be a `.browserslistrc` file, a `browserslist` key in `package.json`, or\n`browserslist` environment variables.\n\nThe `browsers` option should only be used when a standard browserslist\nconfiguration is not available.\n\n```js\npostcssPresetEnv({ browsers: 'last 2 versions' })\n```\n\nIf no valid browserslist configuration is specified, the\n[default browserslist query](https://github.com/browserslist/browserslist#queries)\nwill be used.\n\n### insertBefore / insertAfter\n\nThe `insertBefore` and `insertAfter` keys allow you to insert other PostCSS\nplugins into the chain. This is only useful if you are also using sugary\nPostCSS plugins that must execute before or after certain polyfills.\nBoth `insertBefore` and `insertAfter` support chaining one or multiple plugins.\n\n```js\nimport postcssSimpleVars from 'postcss-simple-vars';\n\npostcssPresetEnv({\n  insertBefore: {\n    'all-property': postcssSimpleVars\n  }\n})\n```\n\n### autoprefixer\n\n[PostCSS Preset Env] includes [autoprefixer] and [`browsers`](#browsers) option\nwill be passed to it automatically.\n\nSpecifying the `autoprefixer` option enables passing\n[additional options](https://github.com/postcss/autoprefixer#options)\ninto [autoprefixer].\n\n```js\npostcssPresetEnv({\n  autoprefixer: { grid: true }\n})\n```\n\nPassing `autoprefixer: false` disables autoprefixer.\n\n⚠️ [autoprefixer] has [complex logic to fix CSS Grid in IE en older Edge](https://github.com/postcss/autoprefixer#grid-autoplacement-support-in-ie).\n\nThis can have unexpected results with certain features and when [`preserve: true`](#preserve) is used. (defaults to `true`)\n\n```pcss\n:root {\n  --grid-gap: 15px;\n}\n\n.test-grid {\n\tgrid-gap: var(--grid-gap);\n\tgrid-template-columns: repeat(2, 1fr);\n}\n```\n\nBecomes :\n\n```\n.test-grid {\n\tgrid-gap: 15px;\n\tgrid-gap: var(--grid-gap);\n\t-ms-grid-columns: 1fr var(--grid-gap) 1fr;\n\tgrid-template-columns: repeat(2, 1fr);\n}\n```\n\nThe prefixed `-ms-grid-columns` still has a custom property: `1fr var(--grid-gap) 1fr;` which won't work.<br />\nThis example shows issues with custom properties but other transforms might have similar issues.\n\nIf you target IE or older Edge it is best to avoid using other modern features in grid property values.<br />\nAs a last resort you can set [`preserve: false`](#preserve), we do not advice this as doing so purely to fix issues with CSS grid.\n\n_older Edge is any version before chromium (<79)_\n\n### preserve\n\nThe `preserve` option determines whether all plugins should receive a\n`preserve` option, which may preserve or remove otherwise-polyfilled CSS. By\ndefault, this option is not configured.\n\n```js\npostcssPresetEnv({\n  preserve: false // instruct all plugins to omit pre-polyfilled CSS\n});\n```\n\n### importFrom\n\nThe `importFrom` option specifies sources where variables like Custom Media,\nCustom Properties, Custom Selectors, and Environment Variables can be imported\nfrom, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssPresetEnv({\n  /*\n    @custom-media --small-viewport (max-width: 30em);\n    @custom-selector :--heading h1, h2, h3;\n    :root { --color: red; }\n  */\n  importFrom: 'path/to/file.css'\n});\n```\n\nMultiple sources can be passed into this option, and they will be parsed in the\norder they are received. JavaScript files, JSON files, functions, and objects\nwill use different namespaces to import different kinds of variables.\n\n```js\npostcssPresetEnv({\n  importFrom: [\n    /*\n      @custom-media --small-viewport (max-width: 30em);\n      @custom-selector :--heading h1, h2, h3;\n      :root { --color: red; }\n    */\n    'path/to/file.css',\n\n    /* module.exports = {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    } */\n    'and/then/this.js',\n\n    /* {\n      \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" }\n      \"custom-properties\": { \"--color\": \"red\" },\n      \"custom-selectors\": { \":--heading\": \"h1, h2, h3\" },\n      \"environment-variables\": { \"--branding-padding\": \"20px\" }\n    } */\n    'and/then/that.json',\n\n    {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    },\n    () => {\n      const customMedia = { '--small-viewport': '(max-width: 30em)' };\n      const customProperties = { '--color': 'red' };\n      const customSelectors = { ':--heading': 'h1, h2, h3' };\n      const environmentVariables = { '--branding-padding': '20px' };\n\n      return { customMedia, customProperties, customSelectors, environmentVariables };\n    }\n  ]\n});\n```\n\n### exportTo\n\nThe `exportTo` option specifies destinations where variables like Custom Media,\nCustom Properties, Custom Selectors, and Environment Variables can be exported\nto, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssPresetEnv({\n  /*\n    @custom-media --small-viewport (max-width: 30em);\n    @custom-selector :--heading h1, h2, h3;\n    :root { --color: red; }\n  */\n  exportTo: 'path/to/file.css'\n});\n```\n\nMultiple destinations can be passed into this option as well, and they will be\nparsed in the order they are received. JavaScript files, JSON files, and\nobjects will use different namespaces to import different kinds of variables.\n\n```js\nconst cachedObject = {};\n\npostcssPresetEnv({\n  exportTo: [\n    /*\n      @custom-media --small-viewport (max-width: 30em);\n      @custom-selector :--heading h1, h2, h3;\n      :root { --color: red; }\n    */\n    'path/to/file.css',\n\n    /* module.exports = {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    } */\n    'and/then/this.js',\n\n    /* {\n      \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" }\n      \"custom-properties\": { \"--color\": \"red\" },\n      \"custom-selectors\": { \":--heading\": \"h1, h2, h3\" },\n      \"environment-variables\": { \"--branding-padding\": \"20px\" }\n    } */\n    'and/then/that.json',\n\n    cachedObject,\n    variables => {\n      if ('customProperties' in variables) {\n        // do something special with customProperties\n      }\n\n      Object.assign(cachedObject, variables);\n    }\n  ]\n});\n```\n\n### debug\n\nThe `debug` option enables debugging messages to stdout which should be useful to help you debug which features have been enabled/disabled and why.\n\n### enableClientSidePolyfills\n\nThe `enableClientSidePolyfills` enables any feature that would need an extra browser library to be loaded into the page for it to work. Defaults to `true`.\n\nNote that manually enabling/disabling features via the \"feature\" option overrides this flag.\n\n## Stability and Portability\n\n[PostCSS Preset Env] will often include very modern CSS features that are not fully ready yet.\nThis gives users the chance to play around with these features and provide feedback.\n\nIf the specification changes or is abandoned a new major version of the plugin will be released.\nThis will require you to update your source code so that everything works as expected.\n\nTo have more stability between updates of [PostCSS Preset Env] you may set `stage: 3` and/or `minimumVendorImplementations: 2`.\n\nA side effect of staying close to the standard is that you can more easily migrate your project to other tooling all together.\n\n## Plugins list\n\n### Plugins that need client library\n\nThis is the current list of features that need a client library with a link\nto the polyfill's library.\n\n* `blank-pseudo-class`: [Plugin](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-blank-pseudo) / [Polyfill](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-blank-pseudo/README-BROWSER.md)\n* `focus-visible-pseudo-class`: [Plugin](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-focus-visible) / [Polyfill](https://github.com/WICG/focus-visible)\n* `focus-within-pseudo-class`: [Plugin](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-focus-within) / [Library](https://github.com/jsxtools/focus-within) / [Polyfill](https://github.com/jsxtools/focus-within/blob/master/README-BROWSER.md)\n* `has-pseudo-class`: [Plugin](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-has-pseudo) / [Polyfill](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-has-pseudo/README-BROWSER.md)\n* `prefers-color-scheme-query`: [Plugin](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-prefers-color-scheme) / [Polyfill](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-prefers-color-scheme/README-BROWSER.md)\n\nIf you want to disable these types of features, please check the [`enableClientSidePolyfills` option](#enableclientsidepolyfills).\n\n### Plugins not affected by Browser Support\n\nGiven they have no support they will always be enabled if they match by Stage:\n\n* `blank-pseudo-class`: [Plugin](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-blank-pseudo) / [Polyfill](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-blank-pseudo/README-BROWSER.md)\n* `custom-media-queries`: [Plugin](https://github.com/postcss/postcss-custom-media)\n* `has-pseudo-class`: [Plugin](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-has-pseudo) / [Polyfill](https://github.com/csstools/postcss-plugins/blob/main/plugins/css-has-pseudo/README-BROWSER.md)\n* `image-set-function`: [Plugin](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-image-set-function)\n* `media-query-ranges`: [Plugin](https://github.com/postcss/postcss-media-minmax)\n* `nesting-rules`: [Plugin](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting)\n\n[cli-img]: https://github.com/csstools/postcss-plugins/workflows/test/badge.svg\n[cli-url]: https://github.com/csstools/postcss-plugins/actions/workflows/test.yml?query=workflow/test\n[discord]: https://discord.gg/bUadyRwkJS\n[npm-img]: https://img.shields.io/npm/v/postcss-preset-env.svg\n[npm-url]: https://www.npmjs.com/package/postcss-preset-env\n[package-phobia-badge]: https://packagephobia.com/badge?p=postcss-preset-env\n[package-phobia]: https://packagephobia.com/result?p=postcss-preset-env\n\n[autoprefixer]: https://github.com/postcss/autoprefixer\n[browserslist]: https://github.com/browserslist/browserslist#readme\n[caniuse]: https://caniuse.com/\n[cssdb]: https://cssdb.org/\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Preset Env]: https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env\n[readme-style-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-style-with-preset-env.svg\n[readme-style-with-preset-env-url]: https://codepen.io/pen?template=OZRovK\n[readme-transform-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-transform-with-preset-env.svg\n[readme-transform-with-preset-env-url]: https://csstools.github.io/postcss-preset-env/\n",
    "licenseText": "# CC0 1.0 Universal\n\n## Statement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an “owner”) of an original work of\nauthorship and/or a database (each, a “Work”).\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific works\n(“Commons”) that the public can reliably and without fear of later claims of\ninfringement build upon, modify, incorporate in other works, reuse and\nredistribute as freely as possible in any form whatsoever and for any purposes,\nincluding without limitation commercial purposes. These owners may contribute\nto the Commons to promote the ideal of a free culture and the further\nproduction of creative, cultural and scientific works, or to gain reputation or\ngreater distribution for their Work in part through the use and efforts of\nothers.\n\nFor these and/or other purposes and motivations, and without any expectation of\nadditional consideration or compensation, the person associating CC0 with a\nWork (the “Affirmer”), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work and\npublicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\n   protected by copyright and related or neighboring rights (“Copyright and\n   Related Rights”). Copyright and Related Rights include, but are not limited\n   to, the following:\n   1. the right to reproduce, adapt, distribute, perform, display, communicate,\n      and translate a Work;\n   2. moral rights retained by the original author(s) and/or performer(s);\n   3. publicity and privacy rights pertaining to a person’s image or likeness\n      depicted in a Work;\n   4. rights protecting against unfair competition in regards to a Work,\n      subject to the limitations in paragraph 4(i), below;\n   5. rights protecting the extraction, dissemination, use and reuse of data in\n      a Work;\n   6. database rights (such as those arising under Directive 96/9/EC of the\n      European Parliament and of the Council of 11 March 1996 on the legal\n      protection of databases, and under any national implementation thereof,\n      including any amended or successor version of such directive); and\n   7. other similar, equivalent or corresponding rights throughout the world\n      based on applicable law or treaty, and any national implementations\n      thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\n   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\n   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright\n   and Related Rights and associated claims and causes of action, whether now\n   known or unknown (including existing as well as future claims and causes of\n   action), in the Work (i) in all territories worldwide, (ii) for the maximum\n   duration provided by applicable law or treaty (including future time\n   extensions), (iii) in any current or future medium and for any number of\n   copies, and (iv) for any purpose whatsoever, including without limitation\n   commercial, advertising or promotional purposes (the “Waiver”). Affirmer\n   makes the Waiver for the benefit of each member of the public at large and\n   to the detriment of Affirmer’s heirs and successors, fully intending that\n   such Waiver shall not be subject to revocation, rescission, cancellation,\n   termination, or any other legal or equitable action to disrupt the quiet\n   enjoyment of the Work by the public as contemplated by Affirmer’s express\n   Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\n   judged legally invalid or ineffective under applicable law, then the Waiver\n   shall be preserved to the maximum extent permitted taking into account\n   Affirmer’s express Statement of Purpose. In addition, to the extent the\n   Waiver is so judged Affirmer hereby grants to each affected person a\n   royalty-free, non transferable, non sublicensable, non exclusive,\n   irrevocable and unconditional license to exercise Affirmer’s Copyright and\n   Related Rights in the Work (i) in all territories worldwide, (ii) for the\n   maximum duration provided by applicable law or treaty (including future time\n   extensions), (iii) in any current or future medium and for any number of\n   copies, and (iv) for any purpose whatsoever, including without limitation\n   commercial, advertising or promotional purposes (the “License”). The License\n   shall be deemed effective as of the date CC0 was applied by Affirmer to the\n   Work. Should any part of the License for any reason be judged legally\n   invalid or ineffective under applicable law, such partial invalidity or\n   ineffectiveness shall not invalidate the remainder of the License, and in\n   such case Affirmer hereby affirms that he or she will not (i) exercise any\n   of his or her remaining Copyright and Related Rights in the Work or (ii)\n   assert any associated claims and causes of action with respect to the Work,\n   in either case contrary to Affirmer’s express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n   1. No trademark or patent rights held by Affirmer are waived, abandoned,\n      surrendered, licensed or otherwise affected by this document.\n   2. Affirmer offers the Work as-is and makes no representations or warranties\n      of any kind concerning the Work, express, implied, statutory or\n      otherwise, including without limitation warranties of title,\n      merchantability, fitness for a particular purpose, non infringement, or\n      the absence of latent or other defects, accuracy, or the present or\n      absence of errors, whether or not discoverable, all to the greatest\n      extent permissible under applicable law.\n   3. Affirmer disclaims responsibility for clearing rights of other persons\n      that may apply to the Work or any use thereof, including without\n      limitation any person’s Copyright and Related Rights in the Work.\n      Further, Affirmer disclaims responsibility for obtaining any necessary\n      consents, permissions or other rights required for any use of the Work.\n   4. Affirmer understands and acknowledges that Creative Commons is not a\n      party to this document and has no duty or obligation with respect to this\n      CC0 or use of the Work.\n\nFor more information, please see\nhttp://creativecommons.org/publicdomain/zero/1.0/.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-preset-env/-/postcss-preset-env-7.4.3.tgz#fb1c8b4cb405da042da0ddb8c5eda7842c08a449",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-preset-env/-/postcss-preset-env-7.4.3.tgz",
    "hash": "fb1c8b4cb405da042da0ddb8c5eda7842c08a449",
    "integrity": "sha512-dlPA65g9KuGv7YsmGyCKtFkZKCPLkoVMUE3omOl6yM+qrynVHxFvf0tMuippIrXB/sB/MyhL1FgTIbrO+qMERg==",
    "registry": "npm",
    "packageName": "postcss-preset-env",
    "cacheIntegrity": "sha512-dlPA65g9KuGv7YsmGyCKtFkZKCPLkoVMUE3omOl6yM+qrynVHxFvf0tMuippIrXB/sB/MyhL1FgTIbrO+qMERg== sha1-+xyLTLQF2gQtoN24xe2nhCwIpEk="
  },
  "registry": "npm",
  "hash": "fb1c8b4cb405da042da0ddb8c5eda7842c08a449"
}