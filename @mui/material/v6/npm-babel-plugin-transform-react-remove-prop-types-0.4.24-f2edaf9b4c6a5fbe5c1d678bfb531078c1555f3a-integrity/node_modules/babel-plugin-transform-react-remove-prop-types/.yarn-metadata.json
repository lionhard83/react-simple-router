{
  "manifest": {
    "name": "babel-plugin-transform-react-remove-prop-types",
    "version": "0.4.24",
    "description": "Remove unnecessary React propTypes from the production build",
    "main": "lib/index.js",
    "scripts": {
      "lint": "eslint . && echo \"eslint: no lint errors\"",
      "test:unit": "mocha",
      "test:watch": "mocha -w",
      "prettier": "find . -name \"*.js\" | grep -v -f .eslintignore | xargs prettier --write",
      "test": "npm run lint && npm run test:unit",
      "prebuild": "rm -rf lib/",
      "build": "babel src --out-dir lib",
      "version": "npm run build && pkgfiles"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types.git"
    },
    "keywords": [
      "babel",
      "babel-plugin",
      "react",
      "minification",
      "propTypes"
    ],
    "author": {
      "name": "Nikita Gusakov"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types/issues"
    },
    "devDependencies": {
      "@babel/cli": "^7.1.0",
      "@babel/core": "^7.1.0",
      "@babel/generator": "^7.0.0",
      "@babel/plugin-external-helpers": "^7.0.0",
      "@babel/plugin-proposal-class-properties": "^7.1.0",
      "@babel/plugin-transform-flow-strip-types": "^7.0.0",
      "@babel/preset-env": "^7.1.0",
      "@babel/preset-flow": "^7.0.0",
      "@babel/preset-react": "^7.0.0",
      "@babel/register": "^7.0.0",
      "babel-eslint": "^9.0.0",
      "babel-plugin-flow-react-proptypes": "^6.1.0",
      "chai": "^4.1.2",
      "eslint": "^4.11.0",
      "eslint-config-airbnb": "^16.1.0",
      "eslint-plugin-babel": "^4.1.2",
      "eslint-plugin-flowtype": "^2.39.1",
      "eslint-plugin-import": "^2.8.0",
      "eslint-plugin-jsx-a11y": "^6.0.2",
      "eslint-plugin-mocha": "^4.11.0",
      "eslint-plugin-prettier": "^2.3.1",
      "eslint-plugin-react": "^7.4.0",
      "globby": "^8.0.1",
      "mocha": "^4.0.1",
      "pkgfiles": "^2.3.2",
      "prettier": "^1.14.3"
    },
    "_registry": "npm",
    "_loc": "/Users/carloleonardi/Documents/workspace/React/sample-routing/@mui/material/v6/npm-babel-plugin-transform-react-remove-prop-types-0.4.24-f2edaf9b4c6a5fbe5c1d678bfb531078c1555f3a-integrity/node_modules/babel-plugin-transform-react-remove-prop-types/package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-plugin-transform-react-remove-prop-types\n\n> Remove unnecessary React propTypes from the production build.\n\n[![npm version](https://img.shields.io/npm/v/babel-plugin-transform-react-remove-prop-types.svg)](https://www.npmjs.com/package/babel-plugin-transform-react-remove-prop-types)\n[![npm downloads](https://img.shields.io/npm/dm/babel-plugin-transform-react-remove-prop-types.svg)](https://www.npmjs.com/package/babel-plugin-transform-react-remove-prop-types)\n[![Build Status](https://travis-ci.org/oliviertassinari/babel-plugin-transform-react-remove-prop-types.svg?branch=master)](https://travis-ci.org/oliviertassinari/babel-plugin-transform-react-remove-prop-types)\n\n[![Dependencies](https://img.shields.io/david/oliviertassinari/babel-plugin-transform-react-remove-prop-types.svg)](https://david-dm.org/oliviertassinari/babel-plugin-transform-react-remove-prop-types)\n[![DevDependencies](https://img.shields.io/david/dev/oliviertassinari/babel-plugin-transform-react-remove-prop-types.svg)](https://david-dm.org/oliviertassinari/babel-plugin-transform-react-remove-prop-types?type=dev)\n\n## Installation\n\n```sh\nnpm install --save-dev babel-plugin-transform-react-remove-prop-types\n```\n\n## The problem solved\n\nRemove React `propTypes` from the production build, as they are only used in development.\nYou can **save bandwidth** by removing them.\n\n## Example\n\n**In**\n```jsx\nconst Baz = (props) => (\n  <div {...props} />\n);\n\nBaz.propTypes = {\n  className: PropTypes.string\n};\n```\n\n**Out**\n```jsx\nconst Baz = (props) => (\n  <div {...props} />\n);\n```\n\n### With comment annotation\n\nThe majority of cases should be addressed by default by this plugin.\n\nIn some cases, for example when using HOCs (High Order Components), like *react-redux*'s `connect`, or component inheritance ([although it's NOT recommended](https://facebook.github.io/react/docs/composition-vs-inheritance.html)), a comment after the `propTypes` definition may be used to force the removal:\n\n```js\nComponent.propTypes /* remove-proptypes */ = {}\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nwithout options:\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"transform-react-remove-prop-types\"]\n    }\n  }\n}\n```\n\nwith options:\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\n        [\"transform-react-remove-prop-types\", {\n          \"mode\": \"wrap\",\n          \"ignoreFilenames\": [\"node_modules\"]\n        }]\n      ]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```sh\nbabel --plugins transform-react-remove-prop-types script.js\n```\n\n### Via Node API\n\nwithout options:\n```js\nrequire('babel-core').transform('code', {\n  plugins: [\n    'transform-react-remove-prop-types',\n  ],\n});\n```\n\nwith options:\n```js\nrequire('babel-core').transform('code', {\n  plugins: [\n    [\n      'transform-react-remove-prop-types',\n      {\n        mode: 'wrap',\n        ignoreFilenames: ['node_modules'],\n      },\n    ],\n  ],\n});\n```\n\n## Options\n\n### `mode`\n\n - `remove` (default):\nthe `propTypes` definitions are removed from the source code.\n - `wrap`:\nthe `propTypes` definitions are wrapped with the following code:\n```js\nComponent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  // ...\n} : {};\n```\nAccessing `Component.propTypes.className` won't throw. It's a tradeoff between the size of the output file and the likelihood libraries like [react-native-hyperlink](https://github.com/obipawan/react-native-hyperlink/pull/11) breaks.\n - `unsafe-wrap`:\nthe `propTypes` definitions are wrapped with the following code:\n```js\nif (process.env.NODE_ENV !== \"production\") {\n  Component.propTypes = {\n    // ...\n  }\n}\n```\nAccessing `Component.propTypes.className` will throw.\n\nThe *wrap* modes are targeting React libraries like [material-ui](https://github.com/callemall/material-ui) or [react-native-web](https://github.com/necolas/react-native-web).\nThey are not intended to be used by application authors.\n\n### `removeImport`\n\n - `true`: the import statements are removed as well. This option only works if `mode` is set to `remove`:\n```js\nimport PropTypes from 'prop-types'\n```\n - `false` (default): does not remove the import statements.\n\n### `ignoreFilenames`\n\nThis filter generates a regular expression.\nAny filenames containing one of the array's strings will be ignored.\nBy **default**, we match everything.\n\nFollowing the [Is it safe?](#user-content-is-it-safe) section, you might encounter a component\ndepending on the `propTypes` at runtime to work.\nFor this reason, we provide an array options to filter out some files and folders.\nFor instance, you can ignore all the npm modules:\n```js\nignoreFilenames: ['node_modules'],\n```\n\n### `additionalLibraries`\n\nThis option gives the possibility to remove other `propTypes` in addition to the canonical `prop-types`.\n\nFor instance, by default\n```js\nimport PropTypes from 'prop-types'\nimport ImmutablePropTypes from 'react-immutable-proptypes'\n```\nwill result in the latter not to be removed, while with:\n```js\nadditionalLibraries: ['react-immutable-proptypes'],\n```\nboth will be removed.\n\n#### Regular expressions\n\nIf you are using Babel 7 or newer and your config is stored in [`babel.config.js`](https://babeljs.io/docs/en/configuration#babelconfigjs), you can also use a regular expression to describe modules, which should be removed.\n\nThis would be particularly useful when using custom prop types validators, implemented as part of your own source code. For example\n\n```js\nimport CustomPropTypes from '../../prop-types/my-own-validator'\nimport OtherCustomPropTypes from '../../prop-types/my-other-validator'\n```\n\nwould be removed with the following setting\n\n```js\nadditionalLibraries: [/\\/prop-types\\/.*$/]\n```\n\nIf you use an index file\n\n```js\nimport CustomPropTypes from '../../prop-types'\n```\n\nyou could set it up as\n\n```js\nadditionalLibraries: [/\\/prop-types$/]\n```\n\n### `classNameMatchers`\n\nUse this option to enable this plugin to run on components that extend a class different than `React.Component` or `React.PureComponent`.\n\nGiven this example:\n```js\nclass MyComponent extends BaseComponent {\n  ...\n}\n```\n\nYou would use:\n```js\nclassNameMatchers: [\"BaseComponent\"]\n```\n\n### `createReactClassName`\n\nUse this option to set a custom name for the import of the `create-react-class` package that is different than `createReactClass`.\n\nGiven this example:\n\n```js\nimport createClass from 'create-react-class';\n```\n\nYou would use:\n\n```js\ncreateReactClassName: 'createClass'\n```\n\n## Is it safe?\n\nIf you are using the `propTypes` in a conventional way,\ni.e by using them to perform type checking on the properties, that plugin should be **safe to use**.\n\nHowever, some libraries are accessing the `propTypes` on the component directly.\nFor instance [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons/blob/3d1f2a5b7175d6e4c8985676940240776543ff60/lib/icon-button.js#L59) use them to split the properties between two components:\n```js\nconst touchableProps = pick(restProps, Object.keys(TouchableHighlight.propTypes));\n```\n:warning: The plugin is breaking that code if it ends up removing `TouchableHighlight.propTypes`.\n\nMake sure you are:\n- Not using that pattern in your source code.\nIf you do, explicitly **export** the `propTypes` to work around that limitation.\n- Not parsing the `node_modules`.\nIf you do, test that your code is still working before shipping into production.\n\n[eslint-plugin-react has a rule forbid-foreign-prop-types](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-foreign-prop-types.md) that can help you make this plugin safer to use.\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Nikita Gusakov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-plugin-transform-react-remove-prop-types/-/babel-plugin-transform-react-remove-prop-types-0.4.24.tgz#f2edaf9b4c6a5fbe5c1d678bfb531078c1555f3a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-plugin-transform-react-remove-prop-types/-/babel-plugin-transform-react-remove-prop-types-0.4.24.tgz",
    "hash": "f2edaf9b4c6a5fbe5c1d678bfb531078c1555f3a",
    "integrity": "sha512-eqj0hVcJUR57/Ug2zE1Yswsw4LhuqqHhD+8v120T1cl3kjg76QwtyBrdIk4WVwK+lAhBJVYCd/v+4nc4y+8JsA==",
    "registry": "npm",
    "packageName": "babel-plugin-transform-react-remove-prop-types",
    "cacheIntegrity": "sha512-eqj0hVcJUR57/Ug2zE1Yswsw4LhuqqHhD+8v120T1cl3kjg76QwtyBrdIk4WVwK+lAhBJVYCd/v+4nc4y+8JsA== sha1-8u2vm0xqX75cHWeL+1MQeMFVXzo="
  },
  "registry": "npm",
  "hash": "f2edaf9b4c6a5fbe5c1d678bfb531078c1555f3a"
}