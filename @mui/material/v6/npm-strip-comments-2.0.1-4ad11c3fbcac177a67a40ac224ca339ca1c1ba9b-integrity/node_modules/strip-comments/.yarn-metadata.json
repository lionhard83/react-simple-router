{
  "manifest": {
    "name": "strip-comments",
    "description": "Strip line and/or block comments from a string. Blazing fast, and works with JavaScript, Sass, CSS, Less.js, and a number of other languages.",
    "version": "2.0.1",
    "homepage": "https://github.com/jonschlinkert/strip-comments",
    "author": {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jonschlinkert/strip-comments.git"
    },
    "bugs": {
      "url": "https://github.com/jonschlinkert/strip-comments/issues"
    },
    "license": "MIT",
    "files": [
      "index.js",
      "lib"
    ],
    "main": "index.js",
    "engines": {
      "node": ">=10"
    },
    "scripts": {
      "test": "mocha",
      "cover": "nyc --reporter=text --reporter=html mocha"
    },
    "devDependencies": {
      "gulp-format-md": "^2.0.0",
      "mocha": "^6.2.2",
      "nyc": "^14.1.1"
    },
    "keywords": [
      "ada comments",
      "apl comments",
      "applescript comments",
      "block comment",
      "block",
      "block-comment",
      "c comments",
      "code comment",
      "comment",
      "comments",
      "csharp comments",
      "css comments",
      "css",
      "hashbang comments",
      "haskell comments",
      "html comments",
      "java comments",
      "javascript comments",
      "javascript",
      "js",
      "less comments",
      "less css",
      "less",
      "less.js",
      "lessjs",
      "line comment",
      "line comments",
      "line",
      "line-comment",
      "line-comments",
      "lua comments",
      "matlab comments",
      "ocaml comments",
      "pascal comments",
      "perl comments",
      "php comments",
      "python comments",
      "remove",
      "ruby comments",
      "sass comments",
      "sass",
      "shebang comments",
      "sql comments",
      "strip",
      "swift comments",
      "typscript comments",
      "xml comments"
    ],
    "verb": {
      "toc": true,
      "layout": "default",
      "tasks": [
        "readme"
      ],
      "plugins": [
        "gulp-format-md"
      ],
      "helpers": [
        "./examples/support/helpers.js"
      ],
      "related": {
        "list": [
          "code-context",
          "extract-comments",
          "parse-code-context",
          "parse-comments"
        ]
      },
      "lint": {
        "reflinks": true
      }
    },
    "_registry": "npm",
    "_loc": "/Users/carloleonardi/Documents/workspace/React/sample-routing/@mui/material/v6/npm-strip-comments-2.0.1-4ad11c3fbcac177a67a40ac224ca339ca1c1ba9b-integrity/node_modules/strip-comments/package.json",
    "readmeFilename": "README.md",
    "readme": "# strip-comments [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=W8YFZ425KND68) [![NPM version](https://img.shields.io/npm/v/strip-comments.svg?style=flat)](https://www.npmjs.com/package/strip-comments) [![NPM monthly downloads](https://img.shields.io/npm/dm/strip-comments.svg?style=flat)](https://npmjs.org/package/strip-comments) [![NPM total downloads](https://img.shields.io/npm/dt/strip-comments.svg?style=flat)](https://npmjs.org/package/strip-comments) [![Build Status](https://travis-ci.org/jonschlinkert/strip-comments.svg?branch=master)](https://travis-ci.org/jonschlinkert/strip-comments)\n\n> Strip line and/or block comments from a string. Blazing fast, and works with JavaScript, Sass, CSS, Less.js, and a number of other languages.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n- [Install](#install)\n- [What does this do?](#what-does-this-do)\n- [Usage](#usage)\n- [API](#api)\n- [About](#about)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/) (requires [Node.js](https://nodejs.org/en/) >=10):\n\n```sh\n$ npm install --save strip-comments\n```\n\n## What does this do?\n\nTakes a string and returns a new string with comments removed. Works with line comments and/or block comments. Optionally removes the first comment only or ignores protected comments.\n\nWorks with:\n\n* ada\n* apl\n* applescript\n* c\n* csharp\n* css\n* hashbang\n* haskell\n* html\n* java\n* javascript\n* less\n* lua\n* matlab\n* ocaml\n* pascal\n* perl\n* php\n* python\n* ruby\n* sass\n* shebang\n* sql\n* swift\n* typscript\n* xml\n\n## Usage\n\nBy default all comments are stripped.\n\n```js\nconst strip = require('strip-comments');\nconst str = strip('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\nconsole.log(str);\n// => 'const foo = \"bar\";\\n'\n```\n\nFor more use-cases see the [tests](./test/test.js)\n\n## API\n\n### [strip](index.js#L33)\n\nStrip all code comments from the given `input`, including protected comments that start with `!`, unless disabled by setting `options.keepProtected` to true.\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: optional options, passed to [extract-comments](https://github.com/jonschlinkert/extract-comments)  \n\n- `line` **{Boolean}**: if `false` strip only block comments, default `true`\n- `block` **{Boolean}**: if `false` strip only line comments, default `true`\n- `keepProtected` **{Boolean}**: Keep ignored comments (e.g. `/*!` and `//!`)\n- `preserveNewlines` **{Boolean}**: Preserve newlines after comments are stripped\n* `returns` **{String}**: modified input\n\n**Example**\n\n```js\nconst str = strip('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";'\n```\n\n### [.block](index.js#L54)\n\nStrip only block comments.\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n* `returns` **{String}**: modified string\n\n**Example**\n\n```js\nconst strip = require('..');\nconst str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";// this is a comment'\n```\n\n### [.line](index.js#L74)\n\nStrip only line comments.\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep ignored comments (e.g. `//!`)\n* `returns` **{String}**: modified string\n\n**Example**\n\n```js\nconst str = strip.line('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";\\n/* me too */'\n```\n\n### [.first](index.js#L95)\n\nStrip the first comment from the given `input`. Or, if `opts.keepProtected` is true, the first non-protected comment will be stripped.\n\n**Params**\n\n* `input` **{String}**\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep comments with `!`\n* `returns` **{String}**\n\n**Example**\n\n```js\nconst output = strip.first(input, { keepProtected: true });\nconsole.log(output);\n// => '//! first comment\\nfoo; '\n```\n\n### [.block](index.js#L116)\n\nParses a string and returns a basic CST (Concrete Syntax Tree).\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n* `returns` **{String}**: modified string\n\n**Example**\n\n```js\nconst strip = require('..');\nconst str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";// this is a comment'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [code-context](https://www.npmjs.com/package/code-context): Parse a string of javascript to determine the context for functions, variables and comments based… [more](https://github.com/jonschlinkert/code-context) | [homepage](https://github.com/jonschlinkert/code-context \"Parse a string of javascript to determine the context for functions, variables and comments based on the code that follows.\")\n* [extract-comments](https://www.npmjs.com/package/extract-comments): Uses esprima to extract line and block comments from a string of JavaScript. Also optionally… [more](https://github.com/jonschlinkert/extract-comments) | [homepage](https://github.com/jonschlinkert/extract-comments \"Uses esprima to extract line and block comments from a string of JavaScript. Also optionally parses code context (the next line of code after a comment).\")\n* [parse-code-context](https://www.npmjs.com/package/parse-code-context): Fast and simple way to parse code context for use with documentation from code comments… [more](https://github.com/jonschlinkert/parse-code-context) | [homepage](https://github.com/jonschlinkert/parse-code-context \"Fast and simple way to parse code context for use with documentation from code comments. Parses context from a single line of JavaScript, for functions, variable declarations, methods, prototype properties, prototype methods etc.\")\n* [parse-comments](https://www.npmjs.com/package/parse-comments): Parse code comments from JavaScript or any language that uses the same format. | [homepage](https://github.com/jonschlinkert/parse-comments \"Parse code comments from JavaScript or any language that uses the same format.\")\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 82 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 4  | [tunnckoCore](https://github.com/tunnckoCore) |  \n| 2  | [mk-pmb](https://github.com/mk-pmb) |  \n| 1  | [kgryte](https://github.com/kgryte) |  \n| 1  | [briandipalma](https://github.com/briandipalma) |  \n| 1  | [epicoxymoron](https://github.com/epicoxymoron) |  \n| 1  | [XuluWarrior](https://github.com/XuluWarrior) |  \n\n### Author\n\n**Jon Schlinkert**\n\n* [GitHub Profile](https://github.com/jonschlinkert)\n* [Twitter Profile](https://twitter.com/jonschlinkert)\n* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n### License\n\nCopyright © 2019, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on November 13, 2019._",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-present, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/strip-comments/-/strip-comments-2.0.1.tgz#4ad11c3fbcac177a67a40ac224ca339ca1c1ba9b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/strip-comments/-/strip-comments-2.0.1.tgz",
    "hash": "4ad11c3fbcac177a67a40ac224ca339ca1c1ba9b",
    "integrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw==",
    "registry": "npm",
    "packageName": "strip-comments",
    "cacheIntegrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw== sha1-StEcP7ysF3pnpArCJMoznKHBups="
  },
  "registry": "npm",
  "hash": "4ad11c3fbcac177a67a40ac224ca339ca1c1ba9b"
}