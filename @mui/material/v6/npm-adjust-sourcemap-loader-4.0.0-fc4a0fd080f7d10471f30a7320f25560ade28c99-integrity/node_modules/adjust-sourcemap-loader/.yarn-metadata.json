{
  "manifest": {
    "name": "adjust-sourcemap-loader",
    "version": "4.0.0",
    "description": "Webpack loader that adjusts source maps",
    "main": "index.js",
    "engines": {
      "node": ">=8.9"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/bholloway/adjust-sourcemap-loader.git"
    },
    "keywords": [
      "webpack",
      "loader",
      "source-map",
      "sourcemap",
      "sources",
      "resolve",
      "adjust"
    ],
    "author": {
      "name": "bholloway"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/bholloway/adjust-sourcemap-loader/issues"
    },
    "homepage": "https://github.com/bholloway/adjust-sourcemap-loader",
    "dependencies": {
      "loader-utils": "^2.0.0",
      "regex-parser": "^2.2.11"
    },
    "devDependencies": {
      "jshint": "^2.12.0"
    },
    "scripts": {
      "lint": "jshint index.js lib codec"
    },
    "_registry": "npm",
    "_loc": "/Users/carloleonardi/Documents/workspace/React/sample-routing/@mui/material/v6/npm-adjust-sourcemap-loader-4.0.0-fc4a0fd080f7d10471f30a7320f25560ade28c99-integrity/node_modules/adjust-sourcemap-loader/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Adjust Source-map Loader\n\n[![NPM](https://nodei.co/npm/adjust-sourcemap-loader.png)](http://github.com/bholloway/adjust-sourcemap-loader)\n\nWebpack loader that adjusts source maps.\n\nUse as a **loader** to debug source-maps or to adjust source-maps between other loaders.\n\nUse as a **module filename template** to ensure the final source-map are to your liking.\n\n## Usage : Loader\n\n``` javascript\nrequire('adjust-sourcemap?format=absolute!babel?sourceMap');\n```\n\n### Source maps required\n\nNote that **source maps** must be enabled on any preceding loader. In the above example we use `babel?sourceMap`.\n\n### Apply via webpack config\n\nIt is preferable to adjust your `webpack.config` so to avoid having to prefix every `require()` statement:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test   : /\\.js/,\n        loaders: ['adjust-sourcemap?format=absolute', 'babel?sourceMap']\n      }\n    ]\n  }\n};\n```\n\n## Usage : Module filename template\n\nSpecifying a certain format as the final step in a loader chain will **not** influence the final source format that Webpack will output. Instead the format is determined by the **module filename template**.\n\nThere are limitations to the filename templating that Webpack provides. This package may also operate as a custom template function that will convert output source-map sources to the desired `format`.\n\nIn the following example we ensure project-relative source-map sources are output.\n\n```javascript\nvar templateFn = require('adjust-sourcemap-loader')\n  .moduleFilenameTemplate({\n    format: 'projectRelative'\n  });\n\nmodule.exports = {\n  output: {\n    ...\n    devtoolModuleFilenameTemplate        : templateFn,\n    devtoolFallbackModuleFilenameTemplate: templateFn\n  }\n};\n```\n\n## Options\n\nAs a loader, options may be set using [query parameters](https://webpack.github.io/docs/using-loaders.html#query-parameters) or by using [programmatic parameters](https://webpack.github.io/docs/how-to-write-a-loader.html#programmable-objects-as-query-option). Programmatic means the following in your `webpack.config`.\n\n```javascript\nmodule.exports = {\n   adjustSourcemapLoader: {\n      ...\n   }\n}\n```\n\nWhere `...` is a hash of any of the following options.\n\n* **`debug`** : `boolean|RegExp` May be used alone (boolean) or with a `RegExp` to match the resource(s) you are interested in debugging.\n\n* **`fail`** : `boolean` Implies an **Error** if a source-map source cannot be decoded.\n\n* **`format`** : `string` Optional output format for source-map `sources`. Must be the name of one of the available `codecs`. Omitting the format will result in **no change** and the outgoing source-map will match the incomming one.\n\n* **`root`** : `boolean` A boolean flag that indices that a `sourceRoot` path sould be included in the output map. This is contingent on a `format` being specified.\n\n* **`codecs`** : `Array.<{name:string, decode:function, encode:function, root:function}>` Optional Array of codecs. There are a number of built-in codecs available. If you specify you own codecs you will loose those that are built-in. However you can include them from the `codec/` directory.\n\nNote that **query** parameters take precedence over **programmatic** parameters.\n\n### Changing the format\n\nBuilt-in codecs that may be specified as a `format` include:\n\n* `absolute`\n* `outputRelative`\n* `projectRelative`\n* `webpackProtocol`\n* `sourceRelative` (works for loader only, **not** Module filename template)\n\n### Specifying codecs\n\nThere are additional built-in codecs that do not support encoding. These are still necessary to decode source-map sources. If you specify your own `options.codecs` then you should **also include the built-in codecs**. Otherwise you will find that some sources cannot be decoded.\n\nThe existing codecs may be found in `/codec`, or on the loader itself:\n\n```javascript\nvar inBuiltCodecs = require('adjust-sourcemap-loader').codecs,\n    myCodecs      = [\n      {\n        name  : 'foo',\n        decode: function(uri) {...},\n        encode: function(absolute) {...},\n        root  : function() {...}\n      },\n      ...\n    ];\n\nmodule.exports = {\n   adjustSourcemapLoader: {\n      codecs: inBuiltCodecs.concat(myCodecs)\n   }\n}\n```\n\nThe codec **order is important**. Those that come first have precedence. Any codec that detects a distinct URI should be foremost so that illegal paths are not encountered by successive codecs.\n\n### Abstract codecs\n\nA codec that detects generated code and cannot `decode()` a URI to an absolute file path.\n\nInstead of implementing `encode()` or `root()` it should instead specify `abstract:true`. Its `decode()` function then may return `boolean` where it detects such generated sources.\n\nFor example, a built-in abstract codec will match the **Webpack bootstrap** code and ensure that its illegal source uri is not encountered by later coders.\n\n## How it works\n\nThe loader will receive a source map as its second parameter, so long as the preceding loader was using source-maps.\n\nThe exception is the **css-loader** where the source-map is in the content, which is **not currently supported** .\n\nThe source-map `sources` are parsed by applying **codec.decode()** functions until one of them returns an absolute path to a file that exists. The exception is abstract codecs, where the source with remain unchanged.\n\nIf a format is specified then the source-map `sources` are recreated by applying the **codec.encode()** function for the stated `format` and (where the `root` option is specified) the **codec.root()** function will set the source-map `sourceRoot`.\n\nIf a codec does not specify **codec.encode()** or **codec.root()** then it may **not** be used as the `format`.\n\n",
    "licenseText": "The MIT License (MIT) \n\nCopyright (c) 2019 Ben Holloway \n\nPermission is hereby granted, free of charge, to any person obtaining a copy \nof this software and associated documentation files (the \"Software\"), to deal \nin the Software without restriction, including without limitation the rights \nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell \ncopies of the Software, and to permit persons to whom the Software is \nfurnished to do so, subject to the following conditions: \n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software. \n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE. \n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz#fc4a0fd080f7d10471f30a7320f25560ade28c99",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz",
    "hash": "fc4a0fd080f7d10471f30a7320f25560ade28c99",
    "integrity": "sha512-OXwN5b9pCUXNQHJpwwD2qP40byEmSgzj8B4ydSN0uMNYWiFmJ6x6KwUllMmfk8Rwu/HJDFR7U8ubsWBoN0Xp0A==",
    "registry": "npm",
    "packageName": "adjust-sourcemap-loader",
    "cacheIntegrity": "sha512-OXwN5b9pCUXNQHJpwwD2qP40byEmSgzj8B4ydSN0uMNYWiFmJ6x6KwUllMmfk8Rwu/HJDFR7U8ubsWBoN0Xp0A== sha1-/EoP0ID30QRx8wpzIPJVYK3ijJk="
  },
  "registry": "npm",
  "hash": "fc4a0fd080f7d10471f30a7320f25560ade28c99"
}