{
  "manifest": {
    "name": "postcss-custom-properties",
    "description": "Use Custom Properties Queries in CSS",
    "version": "12.1.7",
    "author": {
      "name": "Jonathan Neal",
      "email": "jonathantneal@hotmail.com"
    },
    "contributors": [
      {
        "name": "Maxime Thirouin"
      }
    ],
    "license": "MIT",
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/csstools"
    },
    "engines": {
      "node": "^12 || ^14 || >=16"
    },
    "main": "dist/index.cjs",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs",
        "default": "./dist/index.mjs"
      }
    },
    "files": [
      "CHANGELOG.md",
      "LICENSE.md",
      "README.md",
      "dist",
      "index.d.ts"
    ],
    "dependencies": {
      "postcss-value-parser": "^4.2.0"
    },
    "peerDependencies": {
      "postcss": "^8.4"
    },
    "devDependencies": {
      "postcss-import": "^14.0.2"
    },
    "scripts": {
      "build": "rollup -c ../../rollup/default.js",
      "clean": "node -e \"fs.rmSync('./dist', { recursive: true, force: true });\"",
      "docs": "node ../../.github/bin/generate-docs/install.mjs",
      "lint": "npm run lint:eslint && npm run lint:package-json",
      "lint:eslint": "eslint ./src --ext .js --ext .ts --ext .mjs --no-error-on-unmatched-pattern",
      "lint:package-json": "node ../../.github/bin/format-package-json.mjs",
      "prepublishOnly": "npm run clean && npm run build && npm run test",
      "test": "node .tape.mjs && node .tape.cjs && npm run test:exports",
      "test:exports": "node ./test/_import.mjs && node ./test/_require.cjs",
      "test:rewrite-expects": "REWRITE_EXPECTS=true node .tape.mjs"
    },
    "homepage": "https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-custom-properties#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/csstools/postcss-plugins.git",
      "directory": "plugins/postcss-custom-properties"
    },
    "bugs": {
      "url": "https://github.com/csstools/postcss-plugins/issues"
    },
    "keywords": [
      "css",
      "csswg",
      "custom",
      "declarations",
      "postcss",
      "postcss-plugin",
      "properties",
      "specification",
      "variables",
      "vars",
      "w3c"
    ],
    "csstools": {
      "exportName": "postcssCustomProperties",
      "humanReadableName": "PostCSS Custom Properties"
    },
    "volta": {
      "extends": "../../package.json"
    },
    "_registry": "npm",
    "_loc": "/Users/carloleonardi/Documents/workspace/React/sample-routing/@mui/material/v6/npm-postcss-custom-properties-12.1.7-ca470fd4bbac5a87fd868636dafc084bc2a78b41-integrity/node_modules/postcss-custom-properties/package.json",
    "readmeFilename": "README.md",
    "readme": "# PostCSS Custom Properties [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![CSS Standard Status][css-img]][css-url]\n[![Build Status][cli-img]][cli-url]\n[<img alt=\"Discord\" src=\"https://shields.io/badge/Discord-5865F2?logo=discord&logoColor=white\">][discord]\n\n[PostCSS Custom Properties] lets you use Custom Properties in CSS, following\nthe [CSS Custom Properties] specification.\n\n[!['Can I use' table](https://caniuse.bitsofco.de/image/css-variables.png)](https://caniuse.com/#feat=css-variables)\n\n```pcss\n:root {\n  --color: red;\n}\n\nh1 {\n  color: var(--color);\n}\n\n/* becomes */\n\n:root {\n  --color: red;\n}\n\nh1 {\n  color: red;\n  color: var(--color);\n}\n```\n\n**Note:** This plugin only processes variables that are defined in the `:root` selector.\n\n## Usage\n\nAdd [PostCSS Custom Properties] to your project:\n\n```bash\nnpm install postcss-custom-properties --save-dev\n```\n\nUse [PostCSS Custom Properties] as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssCustomProperties = require('postcss-custom-properties');\n\npostcss([\n  postcssCustomProperties(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS Custom Properties] runs in all Node environments, with special instructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) |\n| --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### preserve\n\nThe `preserve` option determines whether Custom Properties and properties using\ncustom properties should be preserved in their original form. By default, both\nof these are preserved.\n\n```js\npostcssCustomProperties({\n  preserve: false\n});\n```\n\n```pcss\n:root {\n  --color: red;\n}\n\nh1 {\n  color: var(--color);\n}\n\n/* becomes */\n\nh1 {\n  color: red;\n}\n```\n\n### importFrom\n\nThe `importFrom` option specifies sources where Custom Properties can be imported\nfrom, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssCustomProperties({\n  importFrom: 'path/to/file.css' // => :root { --color: red }\n});\n```\n\n```pcss\nh1 {\n  color: var(--color);\n}\n\n/* becomes */\n\nh1 {\n  color: red;\n}\n```\n\nMultiple sources can be passed into this option, and they will be parsed in the\norder they are received. JavaScript files, JSON files, functions, and objects\nwill need to namespace Custom Properties using the `customProperties` or\n`custom-properties` key.\n\n```js\npostcssCustomProperties({\n  importFrom: [\n    'path/to/file.css',   // :root { --color: red; }\n    'and/then/this.js',   // module.exports = { customProperties: { '--color': 'red' } }\n    'and/then/that.json', // { \"custom-properties\": { \"--color\": \"red\" } }\n    {\n      customProperties: { '--color': 'red' }\n    },\n    () => {\n      const customProperties = { '--color': 'red' };\n\n      return { customProperties };\n    }\n  ]\n});\n```\n\nSee example imports written in [CSS](test/import-properties.css),\n[JS](test/import-properties.js), and [JSON](test/import-properties.json).\n\n### overrideImportFromWithRoot\n\nThe `overrideImportFromWithRoot` option determines if properties added via `importFrom` are overridden by properties that exist in `:root`.\nDefaults to `false`.\n\n```js\npostcssCustomProperties({\n  overrideImportFromWithRoot: true\n});\n```\n\n### exportTo\n\nThe `exportTo` option specifies destinations where Custom Properties can be exported\nto, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssCustomProperties({\n  exportTo: 'path/to/file.css' // :root { --color: red; }\n});\n```\n\nMultiple destinations can be passed into this option, and they will be parsed\nin the order they are received. JavaScript files, JSON files, and objects will\nneed to namespace Custom Properties using the `customProperties` or\n`custom-properties` key.\n\n```js\nconst cachedObject = { customProperties: {} };\n\npostcssCustomProperties({\n  exportTo: [\n    'path/to/file.css',   // :root { --color: red; }\n    'and/then/this.js',   // module.exports = { customProperties: { '--color': 'red' } }\n    'and/then/this.mjs',  // export const customProperties = { '--color': 'red' } }\n    'and/then/that.json', // { \"custom-properties\": { \"--color\": \"red\" } }\n    'and/then/that.scss', // $color: red;\n    cachedObject,\n    customProperties => {\n      customProperties    // { '--color': 'red' }\n    }\n  ]\n});\n```\n\nSee example exports written to [CSS](test/export-properties.css),\n[JS](test/export-properties.js), [MJS](test/export-properties.mjs),\n[JSON](test/export-properties.json) and [SCSS](test/export-properties.scss).\n\n### disableDeprecationNotice\n\nSilence the deprecation notice that is printed to the console when using `importFrom` or `exportTo`.\n\n> \"importFrom\" and \"exportTo\" will be removed in a future version of postcss-custom-properties.\n> Check the discussion on github for more details. https://github.com/csstools/postcss-plugins/discussions/192\n\n[cli-img]: https://github.com/csstools/postcss-plugins/actions/workflows/test.yml/badge.svg\n[cli-url]: https://github.com/csstools/postcss-plugins/actions/workflows/test.yml?query=workflow/test\n[css-img]: https://cssdb.org/images/badges/custom-properties.svg\n[css-url]: https://cssdb.org/#custom-properties\n[discord]: https://discord.gg/bUadyRwkJS\n[npm-img]: https://img.shields.io/npm/v/postcss-custom-properties.svg\n[npm-url]: https://www.npmjs.com/package/postcss-custom-properties\n\n[CSS Custom Properties]: https://www.w3.org/TR/css-variables-1/\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Custom Properties]: https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-custom-properties\n",
    "licenseText": "# The MIT License (MIT)\n\nCopyright Â© PostCSS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postcss-custom-properties/-/postcss-custom-properties-12.1.7.tgz#ca470fd4bbac5a87fd868636dafc084bc2a78b41",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postcss-custom-properties/-/postcss-custom-properties-12.1.7.tgz",
    "hash": "ca470fd4bbac5a87fd868636dafc084bc2a78b41",
    "integrity": "sha512-N/hYP5gSoFhaqxi2DPCmvto/ZcRDVjE3T1LiAMzc/bg53hvhcHOLpXOHb526LzBBp5ZlAUhkuot/bfpmpgStJg==",
    "registry": "npm",
    "packageName": "postcss-custom-properties",
    "cacheIntegrity": "sha512-N/hYP5gSoFhaqxi2DPCmvto/ZcRDVjE3T1LiAMzc/bg53hvhcHOLpXOHb526LzBBp5ZlAUhkuot/bfpmpgStJg== sha1-ykcP1LusWof9hoY22vwIS8Kni0E="
  },
  "registry": "npm",
  "hash": "ca470fd4bbac5a87fd868636dafc084bc2a78b41"
}